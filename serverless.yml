service: notes-api
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  region: ap-south-1

functions:
  authorizer:
    handler: authorizer.handler
  createNote:
    handler: handler.createNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: post
          path: notes
          authorizer: authorier

  updateNote:
    handler: handler.updateNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: put
          path: notes/{id}
          authorizer: authorier

  deleteNote:
    handler: handler.deleteNote
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: delete
          path: notes/{id}
          authorizer: authorier

  getAllNotes:
    handler: handler.getAllNotes
    environment:
      NOTES_TABLE_NAME: !Ref notesTable
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt notesTable.Arn
    events:
      - http:
          method: get
          path: notes
          authorizer: authorier

plugins:
  - serverless-iam-roles-per-function

# you can add CloudFormation resource templates here
resources:
  Resources:
    notesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: notes
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: notesId
            AttributeType: S
        KeySchema:
          - AttributeName: notesId
            KeyType: HASH
